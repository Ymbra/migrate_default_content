<?php

/**
 * @file
 * Functions for the migrate_default_content module.
 */

use Symfony\Component\Yaml\Parser;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_migration_plugins_alter().
 *
 * Create migrations based on data files.
 */
function migrate_default_content_migration_plugins_alter(&$definitions) {
  $source_dir = DRUPAL_ROOT . '/' . \Drupal::config('migrate_default_content.settings')->get('source_dir');

  $sourceManager = \Drupal::getContainer()->get('plugin.manager.migrate_default_content.source');
  $sourcePlugins = $sourceManager->getDefinitions();

  // First we create a structure with all the migrations because we want to know
  // which ones are available and set dependencies.
  $migrations = [];
  if ($handle = opendir($source_dir)) {
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        $extension = pathinfo($file, PATHINFO_EXTENSION);
        foreach ($sourcePlugins as $sourcePlugin) {
          if ($sourcePlugin['extension'] == $extension) {
            $config = [
              'source_dir' => $source_dir,
              'filename' => $file,
            ];

            /* @var \Drupal\migrate_default_content\BaseSourcePlugin */
            $plugin = $sourceManager->createInstance($sourcePlugin['id'], $config);

            $id = 'migrate_default_content_' . $plugin->getEntityType() . '_' . $plugin->getBundle();
            if (!empty($plugin->getLanguage())) {
              $id .= '_' . $plugin->getLanguage();
            }

            $migrations[$id] = $plugin;
          }
        }
      }
    }
    closedir($handle);
  }
  // Add files migration.
  if (file_exists($source_dir . '/files') && $handle = opendir($source_dir . '/files')) {
    $data_rows = [];
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        $data_rows[] = ['filename' => $file];
      }
    }
    $migrations['migrate_default_content_file'] = [
      'data_rows' => $data_rows,
    ];
    closedir($handle);
  }

  /** @var \Drupal\migrate_default_content\BaseSourcePlugin $migration */
  foreach ($migrations as $id => $migration) {
    if ($id === 'migrate_default_content_file') {
      continue;
    }

    $migration_plugin = [
      'id' => $id,
      'migration_tags' => ['migrate_default_content'],
      'label' => $id,
      'class' => '\Drupal\migrate\Plugin\Migration',
      'status' => 1,
      'destination' => [
        'plugin' => 'entity:' . $migration->getEntityType(),
        'translations' => FALSE,
      ],
    ];

    $migration_plugin['source'] = $migration->getSourceMigrationDefinition();

    // Get bundle info.
    $bundle_key = \Drupal::service('entity_type.manager')->getDefinition($migration->getEntityType())->getKey('bundle');

    if ($bundle_key) {
      $migration_plugin['process'][$bundle_key] = [
        'plugin' => 'default_value',
        'default_value' => $migration->getBundle(),
      ];
    }
    $header = $migration->getHeader();
    foreach ($header as $field) {
      // Headers can have spaces or line endings as is the case for the last
      // field.
      $field = trim($field);
      // This is the field that references the origin node of a translation,
      // it is used to detect that the migration is a translation.
      if ($field == 'translation_origin') {

        // Define the id type of the origin migration.
        $id_type = \Drupal::service('entity_type.manager')->getDefinition($migration->getEntityType())->getKey('id');
        // Define the origin migration.
        $migration_plugin['process'][$id_type] = [
          [
            'plugin' => 'migration',
            'source' => $field,
            'migration' => 'migrate_default_content_' . $migration->getEntityType() . '_' . $migration->getBundle(),
          ],

        ];

        // Define the langcode of the translation.
        $migration_plugin['process']['langcode'] = 'constants/langcode';
        // Define the content as translatable.
        $migration_plugin['destination']['translations'] = TRUE;
        // Define the dependency to the origin migration.
        $migration_plugin['migration_dependencies']['required'][] = 'migrate_default_content_' . $migration->getEntityType() . '_' . $migration->getBundle();

      }
      else {
        // Extra config can be specified like field_name:bundle.
        $extra = explode(':', $field);
        // Handle CSV header fieldSubfield e.g. "bodyFormat".
        $components = preg_split('/([A-Z])/', array_shift($extra), -1, PREG_SPLIT_DELIM_CAPTURE);
        $field = array_shift($components);
        $subfield = strtolower(implode($components));

        $dest_field = empty($subfield) ? $field : $field . '/' . $subfield;

        // It needs to be a normalized process.
        // See: https://api.drupal.org/api/drupal/core!modules!migrate!src!Plugin!Migration.php/function/Migration%3A%3AgetProcessNormalized/
        $migration_plugin['process'][$dest_field] = [
          [
            'plugin' => 'get',
            'source' => $field . ucfirst($subfield) . (empty($extra) ? '' : ':' . implode(':', $extra)),
          ],

        ];

        // If this an entity_reference field and a migrate_default_content
        // migration exists add it automatically.
        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
        $field_definition = \Drupal::service('entity_field.manager')->getFieldDefinitions($migration->getEntityType(), $migration->getBundle())[$field];
        // Handle special field types.
        if ($field_definition) {
          $multiple = $field_definition->getFieldStorageDefinition()->getCardinality() !== 1;
          switch ($field_definition->getType()) {
            case 'entity_reference':
            case 'entity_reference_revisions':
              $settings = $field_definition->getItemDefinition()->getSettings();
              $target_entity_type = $settings['target_type'];

              // In the case of an entity reference the extra configuration is
              // the bundles it should reference.
              if (isset($settings['handler_settings']['target_bundles'])) {
                $extra = array_merge($extra, $settings['handler_settings']['target_bundles']);
              }
              if (!empty($extra)) {
                $target_ids = [];
                // Add all possible referenceable bundles.
                foreach ($extra as $target_bundle) {
                  $target_ids[] = 'migrate_default_content_' . $target_entity_type . '_' . $target_bundle;
                }
                $migration_plugin = migrate_default_content_add_target_migration(
                  $migrations,
                  $migration_plugin,
                  $dest_field,
                  $target_ids,
                  $target_entity_type,
                  $multiple,
                  $field_definition->getType()
                );
              }
              // Assume is an entity with only one bundle. e.g. user.
              // TODO: do not assume. it might be because all bundles are
              // allowed.
              else {
                $target_id = 'migrate_default_content_' . $target_entity_type . '_' . $target_entity_type;
                $migration_plugin = migrate_default_content_add_target_migration(
                  $migrations,
                  $migration_plugin,
                  $dest_field,
                  [$target_id],
                  $target_entity_type,
                  $multiple,
                  $field_definition->getType()
                );
              }

              break;

            case 'file':
            case 'image':
            case 'svg_image_field':
            case 'video':
              $target_id = 'migrate_default_content_file';
              $migration_plugin = migrate_default_content_add_target_migration(
                $migrations,
                $migration_plugin,
                $dest_field,
                [$target_id],
                'file',
                $multiple,
                $field_definition->getType()
              );

              break;

            case 'password':
              $migration_plugin['process'][$dest_field][] = [
                'plugin' => 'password_hash',
              ];
              break;
          }
        }
      }
    }

    // For custom file migrations set an uri field that
    // copies the file as needed.
    if ($migration->getEntityType() === 'file') {
      $migration_plugin['process']['uri'] = [
        [
          'plugin' => 'file_copy',
          'source' => [
            '@source_full_path',
            '@destination_full_uri',
          ],
        ],
      ];
    }

    // Look up for an override yml file.
    $override_file_path = $source_dir . '/overrides/' . $migration->getEntityType() . '.' . $migration->getBundle() . '.yml';
    if (file_exists($override_file_path)) {
      $yaml = new Parser();
      $override = $yaml->parse(file_get_contents($override_file_path));
      $migration_plugin = array_merge_recursive($migration_plugin, $override);
    }
    $definitions[$id] = $migration_plugin;
  }

  if (isset($migrations['migrate_default_content_file'])) {
    $definitions['migrate_default_content_file'] = [
      'id' => 'migrate_default_content_file',
      'migration_tags' => ['migrate_default_content'],
      'label' => 'migrate_default_content_file',
      'class' => '\Drupal\migrate\Plugin\Migration',
      'status' => 1,
      'source' => [
        'plugin' => 'embedded_data',
        'ids' => ['filename' => ['type' => 'string']],
        'data_rows' => $migrations['migrate_default_content_file']['data_rows'],
        'constants' => [
          'source_base_path' => $source_dir . '/files/',
          'destination_base_uri' => 'public://migrate_default_content_files/',
        ],
      ],
      'process' => [
        'filename' => [
          'plugin' => 'get',
          'source' => 'filename',
        ],
        'destination_full_uri' => [
          'plugin' => 'concat',
          'source' => [
            'constants/destination_base_uri',
            'filename',
          ],
        ],
        'source_full_path' => [
          'plugin' => 'concat',
          'source' => [
            'constants/source_base_path',
            'filename',
          ],
        ],
        'uri' => [
          'plugin' => 'file_copy',
          'source' => [
            '@source_full_path',
            '@destination_full_uri',
          ],
        ],
      ],
      'destination' => [
        'plugin' => 'entity:file',
      ],
    ];
  }
}

/**
 * Add a migration to the process pipeline with its dependency.
 */
function migrate_default_content_add_target_migration(
  $migrations,
  $migration_plugin,
  $dest_field,
  $target_ids,
  $target_entity_type,
  $multiple,
  $field_type = 'entity_reference'
) {
  $target_ids = array_intersect(array_keys($migrations), $target_ids);
  if (!empty($target_ids)) {
    $dest_subfield = explode('/', $dest_field);
    if (isset($dest_subfield[1]) && $dest_subfield[1] != 'target_id' && $dest_subfield[1] != 'target_revision_id') {
      return $migration_plugin;
    }
    if ($multiple) {

      // Assume all the target migrations are configured the same with the same
      // first field.
      $target_id = reset($target_ids);
      if ($target_id === 'migrate_default_content_file') {
        $target_key = 'filename';
      }
      else {
        $target_key = $migrations[$target_id]->getKey();
      }

      $process = [
        'plugin' => 'iterator',
        'process' => [
          'target_id' => [
            'plugin' => 'migration',
            'migration' => $target_ids,
            'source' => $target_key,
            'no_stub' => TRUE,
          ],
        ],
      ];

      // Add the rest of subproperties for this field.
      $definition = \Drupal::service('plugin.manager.field.field_type')->getDefinition($field_type);
      $field_definition = BaseFieldDefinition::create($field_type);
      $schema = call_user_func([$definition['class'], 'schema'], $field_definition);
      foreach (array_keys($schema['columns']) as $subproperty) {
        if ($subproperty != 'target_id') {
          $process['process'][$subproperty] = $subproperty;
        }
        // Add only for entity_reference revisions.
        if ($subproperty == 'target_revision_id') {
          $process['process']['target_revision_id'] = [
            'plugin' => 'content_id_to_revision_reference',
            'target_entity_type' => $target_entity_type,
            'source' => '@target_id',
            'lookup_id' => TRUE,
          ];
        }
      }

      $migration_plugin['process'][$dest_field][] = $process;
    }
    else {
      // We don't need a source because only the first process plugin in
      // the pipeline should have it and we already have the explode plugin.
      $migration_plugin['process'][$dest_field][] = [
        'plugin' => 'migration',
        'migration' => $target_ids,
        'no_stub' => TRUE,
      ];
      // Add only for entity_reference revisions.
      if ($field_type === 'entity_reference_revisions') {
        $migration_plugin['process'][$dest_field][] = [
          'plugin' => 'content_id_to_revision_reference',
          'target_entity_type' => $target_entity_type,
          'lookup_id' => FALSE,
        ];
      }
    }

    // Avoid dependencies on itself.
    foreach ($target_ids as $target_id) {
      if ($target_id != $migration_plugin['id']) {
        $migration_plugin['migration_dependencies']['required'][] = $target_id;
      }
    }
  }

  return $migration_plugin;
}
