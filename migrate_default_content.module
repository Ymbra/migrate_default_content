<?php
/**
 * @file
 * Provides functionality for migration default content.
 */

/**
 * Implements hook_libraries_info().
 */
function migrate_default_content_libraries_info() {
  $libraries['spyc'] = array(
    'name' => 'Spyc',
    'version' => '0.5.1',
    'vendor url' => 'https://github.com/mustangostang/spyc',
    'download url' => 'https://raw.githubusercontent.com/mustangostang/spyc/0.5.1/Spyc.php',
    'version arguments' => array(
      'file' => 'Spyc.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'php' => array('Spyc.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function migrate_default_content_requirements($phase) {
  $return = array();
  // Ensure translations don't break at install time.
  drupal_load('module', 'libraries');
  $libraries = migrate_default_content_libraries_info();
  foreach ($libraries as $name => $info) {
    $library = libraries_detect($name);
    $return[$name] = array(
      'title' => $library['name'],
      'severity' => $library['installed'] ? REQUIREMENT_OK : REQUIREMENT_WARNING,
      'value' => $library['installed'] ? l($library['version'], $library['vendor url']) : $library['error message'],
    );
  }

  return $return;
}

/**
 * Returns an array with all the configuration saved into the yaml files.
 *
 * @param string $content_path
 *   Internal path where the yaml and data files are stored.
 *
 * @return array $config
 *   Configuration from the yaml in an array.
 */
function migrate_default_content_get_config_files($content_path = '') {
  $config = &drupal_static(__FUNCTION__, array());
  if (empty($config)) {
    if (libraries_load('spyc')) {
      if (empty($content_path)) {
        $content_path = variable_get('migrate_default_content_path', 'sites/default/files/default_content');
      }
      $files = file_scan_directory($content_path, '/^.+\.(yaml|yml)/');
      foreach ($files as $file) {
        $config[] = Spyc::YAMLLoad($file->uri);
      }
    }
  }
  return $config;
}

/**
 * Fetches the migration files and returns its information.
 *
 * @return array $migrations
 *   Data structure with all its information.
 */
function migrate_default_content_fetch_migrations() {
  $migrations = &drupal_static(__FUNCTION__);
  if (!isset($migrations)) {
    $content_path = variable_get('migrate_default_content_path', 'sites/default/files/default_content');
    $config = migrate_default_content_get_config_files($content_path);
    foreach ($config as $data) {
      $migrations[$data['name']] = array(
        'class_name' => $data['class'],
        'group_name' => 'migrate_default_content',
        'disable_hooks' => isset($data['disable_hooks']) ? $data['disable_hooks'] : array(),
        'source_file' => $data['data_file'],
        'source_path' => $content_path . '/data',
      );
    }
  }
  return $migrations;
}

/**
 * Implements hook_migrate_api().
 */
function migrate_default_content_migrate_api() {
  $api = array(
    'api' => 2,
    'groups' => array(
      'migrate_default_content' => array(
        'title' => t('Migrate default content'),
      ),
    ),
    'migrations' => migrate_default_content_fetch_migrations(),
  );

  return $api;
}

/**
 * Implements hook_flush_caches().
 */
function migrate_default_content_flush_caches() {
  $defined_migrations = migrate_default_content_fetch_migrations();
  // Register defined migrations.
  if (!empty($defined_migrations)) {
    migrate_static_registration(array_keys($defined_migrations));
  }
}

/**
 * Implements hook_entity_presave().
 */
function migrate_default_content_entity_presave($entity, $type) {
  // Support entity registration.
  if ($type == 'registration' && isset($entity->entity)) {
    $entity->entity_id = $entity->entity['destid1'];
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 *
 * Conflicts with i18n_taxonomy and it's hook_taxonomy_term_presave
 * but since that module has a heavier weight it will have a vid.
 */
function migrate_default_content_taxonomy_term_presave($term) {
  // Transform machine name to vid on taxonomy_term_save().
  if (empty($term->vid) && $term->vocabulary_machine_name) {
    // Loads taxonomy vocabulary and assigns its vid to the taxonomy term.
    $term->vid = taxonomy_vocabulary_machine_name_load($term->vocabulary_machine_name)->vid;
  }
}
